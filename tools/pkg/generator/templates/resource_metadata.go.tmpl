//go:build !ignore_autogenerated

// Code generated by cli-gen. DO NOT EDIT.

package {{.PackageName}}

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ResourceMetadata contains metadata about a resource type
type ResourceMetadata struct {
	Kind       string
	Group      string
	Version    string
	Plural     string
	Singular   string
	ShortNames []string
	Scope      string
	HasStatus  bool
}

// GetResourceMetadata returns metadata for a given resource kind
func GetResourceMetadata(kind string) (*ResourceMetadata, bool) {
	metadata, ok := resourceMetadataMap[kind]
	return metadata, ok
}

// GetResourceByPlural returns metadata for a resource by its plural name
func GetResourceByPlural(plural string) (*ResourceMetadata, bool) {
	for _, meta := range resourceMetadataMap {
		if meta.Plural == plural {
			return meta, true
		}
	}
	return nil, false
}

// GetResourceByShortName returns metadata for a resource by its short name
func GetResourceByShortName(shortName string) (*ResourceMetadata, bool) {
	for _, meta := range resourceMetadataMap {
		for _, sn := range meta.ShortNames {
			if sn == shortName {
				return meta, true
			}
		}
	}
	return nil, false
}

// GetAllResourceMetadata returns all known resource metadata
func GetAllResourceMetadata() map[string]*ResourceMetadata {
	result := make(map[string]*ResourceMetadata)
	for k, v := range resourceMetadataMap {
		result[k] = v
	}
	return result
}

var resourceMetadataMap = map[string]*ResourceMetadata{
{{- range .Resources }}
	"{{ .Kind }}": {
		Kind:       "{{ .Kind }}",
		Group:      "{{ .Group }}",
		Version:    "{{ .Version }}",
		Plural:     "{{ or .Plural (pluralize .Kind) }}",
		Singular:   "{{ or .Singular (toLower .Kind) }}",
		ShortNames: []string{ {{- range .ShortNames }}"{{ . }}", {{- end }} },
		Scope:      "{{ or .Scope "Namespaced" }}",
		HasStatus:  {{ .HasStatus }},
	},
{{- end }}
}

// GetGroupVersionResource returns the GVR for a given kind
func GetGroupVersionResource(kind string) (*schema.GroupVersionResource, bool) {
	meta, ok := GetResourceMetadata(kind)
	if !ok {
		return nil, false
	}

	gvr := &schema.GroupVersionResource{
		Group:    meta.Group,
		Version:  meta.Version,
		Resource: meta.Plural,
	}
	return gvr, true
}

// GetGroupVersionKind returns the GVK for a given kind  
func GetGroupVersionKind(kind string) (*schema.GroupVersionKind, bool) {
	meta, ok := GetResourceMetadata(kind)
	if !ok {
		return nil, false
	}

	gvk := &schema.GroupVersionKind{
		Group:   meta.Group,
		Version: meta.Version,
		Kind:    meta.Kind,
	}
	return gvk, true
}