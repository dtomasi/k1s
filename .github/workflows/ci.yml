name: CI - K1S Quality Gates

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Tools are managed by Hermit - single source of truth for versions

jobs:
  # Format and basic checks
  format:
    name: Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Verify Go installation
        run: |
          go version
          which go

      - name: Download dependencies
        run: go work sync

      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Code is not formatted. Please run 'gofmt -w .'"
            gofmt -l .
            exit 1
          fi

      - name: Check imports
        run: |
          if [ -n "$(goimports -l .)" ]; then
            echo "Imports are not formatted. Please run 'goimports -w .'"
            goimports -l .
            exit 1
          fi

  # Comprehensive linting with golangci-lint
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: format

    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Activate Hermit
      uses: cashapp/activate-hermit@v1
      with:
        cache: true

    - name: Verify Go installation
      run: |
        go version
        which go

    - name: Download dependencies
      run: go work sync

    - name: Run golangci-lint - Core
      run: |
        cd core
        golangci-lint run --timeout=10m --config=../.golangci.yml

    - name: Run golangci-lint - Memory Storage
      run: |
        cd storage/memory
        golangci-lint run --timeout=10m --config=../../.golangci.yml

    - name: Run golangci-lint - Pebble Storage
      run: |
        cd storage/pebble
        golangci-lint run --timeout=10m --config=../../.golangci.yml

    - name: Run golangci-lint - Tools
      run: |
        cd tools
        golangci-lint run --timeout=10m --config=../.golangci.yml

    - name: Run golangci-lint - Examples
      run: |
        cd examples
        golangci-lint run --timeout=10m --config=../.golangci.yml

  # Testing - Ubuntu only for now 
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Verify Go installation
        run: |
          go version

      - name: Download dependencies
        run: go work sync

      - name: Run tests - Core
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
        working-directory: core

      - name: Run tests - Memory Storage
        run: go test -race -coverprofile=coverage-memory.out -covermode=atomic ./...
        working-directory: storage/memory

      - name: Run tests - Pebble Storage
        run: go test -race -coverprofile=coverage-pebble.out -covermode=atomic ./...
        working-directory: storage/pebble

      - name: Run tests - Tools
        run: go test -race -coverprofile=coverage-tools.out -covermode=atomic ./...
        working-directory: tools

      - name: Run tests - Examples
        run: go test -race -coverprofile=coverage-examples.out -covermode=atomic ./...
        working-directory: examples

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./core/coverage.out,./storage/memory/coverage-memory.out,./storage/pebble/coverage-pebble.out,./tools/coverage-tools.out,./examples/coverage-examples.out
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Coverage enforcement (70% minimum)
  coverage:
    name: Coverage Check (70% minimum)
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Activate Hermit
      uses: cashapp/activate-hermit@v1
      with:
        cache: true

    - name: Verify Go installation
      run: |
        go version
        which go

    - name: Download dependencies
      run: go work sync

    - name: Install bc for calculations
      run: sudo apt-get update && sudo apt-get install -y bc

    - name: Check coverage - Core (70% required)
      run: |
        go test -coverprofile=coverage.out -covermode=atomic ./...
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Core module coverage: ${COVERAGE}%"
        
        if (( $(echo "${COVERAGE} < 70.0" | bc -l) )); then
          echo "❌ Core module coverage ${COVERAGE}% is below required 70%"
          exit 1
        else
          echo "✅ Core module coverage ${COVERAGE}% meets requirement"
        fi
      working-directory: core

    - name: Check coverage - Storage modules (70% required)
      run: |
        echo "=== Memory Storage Coverage ==="
        cd storage/memory
        go test -coverprofile=coverage-memory.out -covermode=atomic ./...
        MEMORY_COVERAGE=$(go tool cover -func=coverage-memory.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Memory storage coverage: ${MEMORY_COVERAGE}%"
        
        if (( $(echo "${MEMORY_COVERAGE} < 70.0" | bc -l) )); then
          echo "❌ Memory storage coverage ${MEMORY_COVERAGE}% is below required 70%"
          exit 1
        fi
        
        echo "=== Pebble Storage Coverage ==="
        cd ../pebble
        go test -coverprofile=coverage-pebble.out -covermode=atomic ./...
        PEBBLE_COVERAGE=$(go tool cover -func=coverage-pebble.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Pebble storage coverage: ${PEBBLE_COVERAGE}%"
        
        if (( $(echo "${PEBBLE_COVERAGE} < 70.0" | bc -l) )); then
          echo "❌ Pebble storage coverage ${PEBBLE_COVERAGE}% is below required 70%"
          exit 1
        fi
        
        echo "✅ All storage modules meet 70% coverage requirement"

  # Build verification
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: coverage

    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Activate Hermit
      uses: cashapp/activate-hermit@v1
      with:
        cache: true

    - name: Verify Go installation
      run: |
        go version
        which go

    - name: Download dependencies
      run: go work sync

    - name: Build - Core
      run: go build ./...
      working-directory: core

    - name: Build - Memory Storage
      run: go build ./...
      working-directory: storage/memory

    - name: Build - Pebble Storage
      run: go build ./...
      working-directory: storage/pebble

    - name: Build - Tools
      run: go build ./...
      working-directory: tools

    - name: Build - Examples
      run: go build ./...
      working-directory: examples

    - name: Build CLI tools
      run: |
        # Build cli-gen tool
        cd tools
        go build -o ../bin/cli-gen ./cmd/cli-gen
        
        # Build k1s-demo (if main.go exists)
        cd ../examples
        if [ -f cmd/k1s-demo/main.go ]; then
          go build -o ../bin/k1s-demo ./cmd/k1s-demo
        fi

    - name: Verify binaries (if they exist)
      run: |
        if [ -f bin/cli-gen ]; then
          ./bin/cli-gen --help || echo "cli-gen binary built but help not yet implemented"
        fi
        
        if [ -f bin/k1s-demo ]; then
          ./bin/k1s-demo --help || echo "k1s-demo binary built but help not yet implemented"
        fi

  # Performance benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Verify Go installation
        run: |
          go version
          which go

      - name: Download dependencies
        run: go work sync

      - name: Run benchmarks - Core
        run: go test -bench=. -benchmem -run=^$ ./... || echo "No benchmarks in core yet"
        working-directory: core

      - name: Run benchmarks - Storage backends
        run: |
          echo "=== Memory Storage Benchmarks (Target: >10,000 ops/sec) ==="
          cd storage/memory && go test -bench=. -benchmem -run=^$ ./... || echo "No benchmarks yet"
          
          echo "=== Pebble Storage Benchmarks (Target: >3,000 ops/sec) ==="  
          cd ../pebble && go test -bench=. -benchmem -run=^$ ./... || echo "No benchmarks yet"

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Verify Go installation
        run: |
          go version
          which go

      - name: Download dependencies
        run: go work sync

      - name: Run gosec security scan
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-report.sarif -stdout ./... || echo "Security scan completed with findings"

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-report.sarif