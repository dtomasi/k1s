name: CI - K1S Quality Gates

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Tools are managed by Hermit - single source of truth for versions

jobs:
  # Format check - fast and independent
  format:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go work sync

      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Code is not formatted. Please run 'gofmt -w .'"
            gofmt -l .
            exit 1
          fi

      - name: Check imports
        run: |
          if [ -n "$(goimports -l .)" ]; then
            echo "Imports are not formatted. Please run 'goimports -w .'"
            goimports -l .
            exit 1
          fi

  # Linting - independent from format
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go work sync

      - name: Run linting
        run: just lint

  # Tests - run in parallel with format/lint
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go work sync

      - name: Run tests - Core
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
        working-directory: core

      - name: Run tests - Memory Storage
        run: go test -race -coverprofile=coverage-memory.out -covermode=atomic ./...
        working-directory: storage/memory

      - name: Run tests - Pebble Storage  
        run: go test -race -coverprofile=coverage-pebble.out -covermode=atomic ./...
        working-directory: storage/pebble

      - name: Run tests - CLI-Gen Tool
        run: go test -race -coverprofile=coverage-cli-gen.out -covermode=atomic ./...
        working-directory: tools/cli-gen

      - name: Run tests - Examples
        run: go test -race -coverprofile=coverage-examples.out -covermode=atomic ./...
        working-directory: examples

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: env.CODECOV_TOKEN != ''
        with:
          files: ./core/coverage.out,./storage/memory/coverage-memory.out,./storage/pebble/coverage-pebble.out,./tools/cli-gen/coverage-cli-gen.out,./examples/coverage-examples.out
          fail_ci_if_error: false
          verbose: true
        continue-on-error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Build & Performance - after basic quality checks pass
  build:
    name: Build & Performance
    runs-on: ubuntu-latest
    needs: [format, lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go work sync

      # Build all modules using just command
      - name: Build all modules
        run: just build

      - name: Build CLI tools
        run: |
          # Build cli-gen tool
          cd tools/cli-gen
          go build -o ../../bin/cli-gen ./cmd
          
          # Build k1s-demo (if main.go exists)
          cd ../../examples
          if [ -f cmd/k1s-demo/main.go ]; then
            go build -o ../bin/k1s-demo ./cmd/k1s-demo
          fi

      - name: Verify binaries
        run: |
          if [ -f bin/cli-gen ]; then
            ./bin/cli-gen --help || echo "cli-gen binary built but help not yet implemented"
          fi
          if [ -f bin/k1s-demo ]; then
            ./bin/k1s-demo --help || echo "k1s-demo binary built but help not yet implemented"
          fi

      - name: Run benchmarks
        run: |
          echo "=== Core Benchmarks ==="
          cd core && go test -bench=. -benchmem -run=^$ ./... || echo "No benchmarks in core yet"
          
          echo "=== Memory Storage Benchmarks (Target: >10,000 ops/sec) ==="
          cd ../storage/memory && go test -bench=. -benchmem -run=^$ ./... || echo "No benchmarks yet"
          
          echo "=== Pebble Storage Benchmarks (Target: >3,000 ops/sec) ==="  
          cd ../pebble && go test -bench=. -benchmem -run=^$ ./... || echo "No benchmarks yet"

  # Coverage check - after tests complete, validates coverage thresholds
  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !cancelled() }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go work sync

      - name: Install bc for calculations
        run: sudo apt-get update && sudo apt-get install -y bc

      - name: Check coverage - Core (70% required)
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Core module coverage: ${COVERAGE}%"
          if (( $(echo "${COVERAGE} < 70.0" | bc -l) )); then
            echo "❌ Core module coverage ${COVERAGE}% is below required 70%"
            exit 1
          else
            echo "✅ Core module coverage ${COVERAGE}% meets requirement"
          fi
        working-directory: core

      - name: Check coverage - Storage modules
        run: |
          echo "=== Memory Storage Coverage ==="
          cd storage/memory
          go test -coverprofile=coverage-memory.out -covermode=atomic ./...
          MEMORY_COVERAGE=$(go tool cover -func=coverage-memory.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Memory storage coverage: ${MEMORY_COVERAGE}%"
          
          if (( $(echo "${MEMORY_COVERAGE} < 70.0" | bc -l) )); then
            echo "❌ Memory storage coverage ${MEMORY_COVERAGE}% is below required 70%"
            exit 1
          fi
          
          echo "=== Pebble Storage Coverage ==="
          cd ../pebble
          go test -coverprofile=coverage-pebble.out -covermode=atomic ./...
          PEBBLE_COVERAGE=$(go tool cover -func=coverage-pebble.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Pebble storage coverage: ${PEBBLE_COVERAGE}%"
          
          # Temporarily lower requirement for pebble storage as it's new and complex
          if (( $(echo "${PEBBLE_COVERAGE} < 65.0" | bc -l) )); then
            echo "❌ Pebble storage coverage ${PEBBLE_COVERAGE}% is below required 65%"
            exit 1
          else
            echo "✅ Pebble storage coverage ${PEBBLE_COVERAGE}% meets temporary 65% requirement"
          fi
          
          echo "✅ All storage modules meet coverage requirements"

  # Security scanning runs independently 
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go work sync

      - name: Run gosec security scan
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-report.sarif -stdout ./... || echo "Security scan completed with findings"

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always() && env.ENABLE_SECURITY_UPLOADS == 'true'
        with:
          sarif_file: gosec-report.sarif
        continue-on-error: true