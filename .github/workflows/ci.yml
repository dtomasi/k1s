name: CI - K1S Quality Gates

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Tools are managed by Hermit - single source of truth for versions

jobs:
  # Format check - fast and independent
  format:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go work sync

      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Code is not formatted. Please run 'gofmt -w .'"
            gofmt -l .
            exit 1
          fi

      - name: Check imports
        run: |
          if [ -n "$(goimports -l .)" ]; then
            echo "Imports are not formatted. Please run 'goimports -w .'"
            goimports -l .
            exit 1
          fi

  # Linting - independent from format
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go work sync

      - name: Run linting
        run: just lint

  # Detect changes to determine which modules need testing
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.changes.outputs.core }}
      memory: ${{ steps.changes.outputs.memory }}
      pebble: ${{ steps.changes.outputs.pebble }}
      cli-gen: ${{ steps.changes.outputs.cli-gen }}
      cli-runtime: ${{ steps.changes.outputs.cli-runtime }}
      controller-runtime: ${{ steps.changes.outputs.controller-runtime }}
      examples: ${{ steps.changes.outputs.examples }}
      go-files: ${{ steps.changes.outputs.go-files }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Detect changed files
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            core:
              - 'core/**/*.go'
              - 'core/go.mod'
              - 'core/go.sum'
            memory:
              - 'storage/memory/**/*.go'
              - 'storage/memory/go.mod'
              - 'storage/memory/go.sum'
              - 'core/**/*.go'
            pebble:
              - 'storage/pebble/**/*.go'
              - 'storage/pebble/go.mod'
              - 'storage/pebble/go.sum'
              - 'core/**/*.go'
            cli-gen:
              - 'tools/cli-gen/**/*.go'
              - 'tools/cli-gen/go.mod'
              - 'tools/cli-gen/go.sum'
            cli-runtime:
              - 'cli-runtime/**/*.go'
              - 'cli-runtime/go.mod'
              - 'cli-runtime/go.sum'
              - 'core/**/*.go'
            controller-runtime:
              - 'controller-runtime/**/*.go'
              - 'controller-runtime/go.mod'
              - 'controller-runtime/go.sum'
              - 'core/**/*.go'
            examples:
              - 'examples/**/*.go'
              - 'examples/go.mod'
              - 'examples/go.sum'
              - 'core/**/*.go'
            go-files:
              - '**/*.go'
              - '**/go.mod'
              - '**/go.sum'
              - 'go.work'
              - 'go.work.sum'

  # Tests - run in parallel with format/lint, but only for changed modules
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go-files == 'true'
    strategy:
      matrix:
        include:
          - module: core
            path: core
            needs-change: ${{ needs.changes.outputs.core }}
            coverage-file: coverage.out
          - module: memory
            path: storage/memory
            needs-change: ${{ needs.changes.outputs.memory }}
            coverage-file: coverage-memory.out
          - module: pebble
            path: storage/pebble
            needs-change: ${{ needs.changes.outputs.pebble }}
            coverage-file: coverage-pebble.out
          - module: cli-gen
            path: tools/cli-gen
            needs-change: ${{ needs.changes.outputs.cli-gen }}
            coverage-file: coverage-cli-gen.out
          - module: cli-runtime
            path: cli-runtime
            needs-change: ${{ needs.changes.outputs.cli-runtime }}
            coverage-file: coverage-cli-runtime.out
          - module: controller-runtime
            path: controller-runtime
            needs-change: ${{ needs.changes.outputs.controller-runtime }}
            coverage-file: coverage-controller-runtime.out
          - module: examples
            path: examples
            needs-change: ${{ needs.changes.outputs.examples }}
            coverage-file: coverage-examples.out
    
    steps:
      - name: Checkout code
        if: matrix.needs-change == 'true'
        uses: actions/checkout@v5

      - name: Activate Hermit
        if: matrix.needs-change == 'true'
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        if: matrix.needs-change == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        if: matrix.needs-change == 'true'
        run: go work sync

      - name: Run tests - ${{ matrix.module }}
        if: matrix.needs-change == 'true'
        run: go test -race -coverprofile=${{ matrix.coverage-file }} -covermode=atomic ./...
        working-directory: ${{ matrix.path }}

      - name: Upload coverage for ${{ matrix.module }}
        if: matrix.needs-change == 'true' && env.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v5
        with:
          files: ./${{ matrix.path }}/${{ matrix.coverage-file }}
          flags: ${{ matrix.module }}
          fail_ci_if_error: false
          verbose: true
        continue-on-error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Build & Performance - after basic quality checks pass
  build:
    name: Build & Performance
    runs-on: ubuntu-latest
    needs: [format, lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go work sync

      # Build all modules using just command
      - name: Build all modules
        run: just build

      - name: Build CLI tools
        run: |
          # Build cli-gen tool
          cd tools/cli-gen
          go build -o ../../bin/cli-gen ./cmd
          
          # Build k1s-demo (if main.go exists)
          cd ../../examples
          if [ -f cmd/k1s-demo/main.go ]; then
            go build -o ../bin/k1s-demo ./cmd/k1s-demo
          fi

      - name: Verify binaries
        run: |
          if [ -f bin/cli-gen ]; then
            ./bin/cli-gen --help || echo "cli-gen binary built but help not yet implemented"
          fi
          if [ -f bin/k1s-demo ]; then
            ./bin/k1s-demo --help || echo "k1s-demo binary built but help not yet implemented"
          fi

      - name: Run benchmarks
        run: |
          echo "=== Core Benchmarks ==="
          cd core && go test -bench=. -benchmem -run=^$ ./... || echo "No benchmarks in core yet"
          
          echo "=== Memory Storage Benchmarks (Target: >10,000 ops/sec) ==="
          cd ../storage/memory && go test -bench=. -benchmem -run=^$ ./... || echo "No benchmarks yet"
          
          echo "=== Pebble Storage Benchmarks (Target: >3,000 ops/sec) ==="  
          cd ../pebble && go test -bench=. -benchmem -run=^$ ./... || echo "No benchmarks yet"

  # Coverage check - after tests complete, validates coverage thresholds
  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !cancelled() }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go work sync

      - name: Install bc for calculations
        run: sudo apt-get update && sudo apt-get install -y bc

      - name: Check coverage - Core (70% required)
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Core module coverage: ${COVERAGE}%"
          if (( $(echo "${COVERAGE} < 70.0" | bc -l) )); then
            echo "❌ Core module coverage ${COVERAGE}% is below required 70%"
            exit 1
          else
            echo "✅ Core module coverage ${COVERAGE}% meets requirement"
          fi
        working-directory: core

      - name: Check coverage - All modules
        run: |
          failed_modules=()
          
          # Function to check coverage for a module
          check_module_coverage() {
            local module_name="$1"
            local module_path="$2" 
            local coverage_file="$3"
            local min_coverage="$4"
            
            echo "=== ${module_name} Coverage ==="
            cd "${module_path}"
            
            if [ ! -f "${coverage_file}" ]; then
              if ! go test -coverprofile="${coverage_file}" -covermode=atomic ./... 2>/dev/null; then
                echo "⚠️  No tests in ${module_name}, skipping coverage check"
                return 0
              fi
            fi
            
            if [[ ! -s "${coverage_file}" ]]; then
              echo "⚠️  No coverage data for ${module_name}"
              return 0
            fi
            
            COVERAGE=$(go tool cover -func="${coverage_file}" | grep total | awk '{print $3}' | sed 's/%//')
            echo "${module_name} coverage: ${COVERAGE}%"
            
            if (( $(echo "${COVERAGE} < ${min_coverage}" | bc -l) )); then
              echo "❌ ${module_name} coverage ${COVERAGE}% is below required ${min_coverage}%"
              failed_modules+=("${module_name}")
            else
              echo "✅ ${module_name} coverage ${COVERAGE}% meets requirement"
            fi
            
            cd - > /dev/null
          }
          
          # Check each module
          check_module_coverage "Memory Storage" "storage/memory" "coverage-memory.out" "70.0"
          check_module_coverage "Pebble Storage" "storage/pebble" "coverage-pebble.out" "65.0"
          check_module_coverage "CLI-Gen Tool" "tools/cli-gen" "coverage-cli-gen.out" "70.0"
          check_module_coverage "CLI Runtime" "cli-runtime" "coverage-cli-runtime.out" "70.0"
          check_module_coverage "Controller Runtime" "controller-runtime" "coverage-controller-runtime.out" "70.0"
          check_module_coverage "Examples" "examples" "coverage-examples.out" "60.0"
          
          if [ ${#failed_modules[@]} -ne 0 ]; then
            echo ""
            echo "❌ Coverage check failed for modules: ${failed_modules[*]}"
            exit 1
          fi
          
          echo "✅ All modules meet coverage requirements"

  # Security scanning runs independently 
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Activate Hermit
        uses: cashapp/activate-hermit@v1
        with:
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go work sync

      - name: Run gosec security scan
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-report.sarif -stdout ./... || echo "Security scan completed with findings"

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always() && env.ENABLE_SECURITY_UPLOADS == 'true'
        with:
          sarif_file: gosec-report.sarif
        continue-on-error: true