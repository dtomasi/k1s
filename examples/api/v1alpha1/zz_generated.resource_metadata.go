//go:build !ignore_autogenerated

// Code generated by cli-gen. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	"github.com/dtomasi/k1s/core/pkg/registry"
)

// ResourceMetadata contains metadata about a resource type
type ResourceMetadata struct {
	Group   string
	Version string
	Config  registry.ResourceConfig
}

// GetResourceMetadata returns metadata for a given resource kind
func GetResourceMetadata(kind string) (*ResourceMetadata, bool) {
	metadata, ok := resourceMetadataMap[kind]
	return metadata, ok
}

// GetResourceByPlural returns metadata for a resource by its plural name
func GetResourceByPlural(plural string) (*ResourceMetadata, bool) {
	for _, meta := range resourceMetadataMap {
		if meta.Config.Plural == plural {
			return meta, true
		}
	}
	return nil, false
}

// GetResourceByShortName returns metadata for a resource by its short name
func GetResourceByShortName(shortName string) (*ResourceMetadata, bool) {
	for _, meta := range resourceMetadataMap {
		for _, sn := range meta.Config.ShortNames {
			if sn == shortName {
				return meta, true
			}
		}
	}
	return nil, false
}

// GetAllResourceMetadata returns all known resource metadata
func GetAllResourceMetadata() map[string]*ResourceMetadata {
	result := make(map[string]*ResourceMetadata)
	for k, v := range resourceMetadataMap {
		result[k] = v
	}
	return result
}

var resourceMetadataMap = map[string]*ResourceMetadata{
	"Category": {
		Group:   "examples.k1s.dtomasi.github.io",
		Version: "v1alpha1",
		Config: registry.ResourceConfig{
			Kind:       "Category",
			ListKind:   "CategoryList",
			Singular:   "category",
			Plural:     "categories",
			Namespaced: true,
			ShortNames: []string{"cat"},
			PrintColumns: []metav1.TableColumnDefinition{
				{
					Name:        "Category Name",
					Type:        "string",
					Format:      "",
					Description: "",
					Priority:    int32(0),
				},
				{
					Name:        "Items",
					Type:        "integer",
					Format:      "",
					Description: "",
					Priority:    int32(0),
				},
				{
					Name:        "Subcategories",
					Type:        "integer",
					Format:      "",
					Description: "",
					Priority:    int32(0),
				},
				{
					Name:        "Parent",
					Type:        "string",
					Format:      "",
					Description: "",
					Priority:    int32(0),
				},
				{
					Name:        "Age",
					Type:        "date",
					Format:      "",
					Description: "",
					Priority:    int32(0),
				},
			},
			Categories:  []string{}, // Categories can be added later if needed
			Description: "Category resource",
		},
	},
	"Item": {
		Group:   "examples.k1s.dtomasi.github.io",
		Version: "v1alpha1",
		Config: registry.ResourceConfig{
			Kind:       "Item",
			ListKind:   "ItemList",
			Singular:   "item",
			Plural:     "items",
			Namespaced: true,
			ShortNames: []string{"itm"},
			PrintColumns: []metav1.TableColumnDefinition{
				{
					Name:        "Item Name",
					Type:        "string",
					Format:      "",
					Description: "",
					Priority:    int32(0),
				},
				{
					Name:        "Quantity",
					Type:        "integer",
					Format:      "",
					Description: "",
					Priority:    int32(0),
				},
				{
					Name:        "Category",
					Type:        "string",
					Format:      "",
					Description: "",
					Priority:    int32(0),
				},
				{
					Name:        "Status",
					Type:        "string",
					Format:      "",
					Description: "",
					Priority:    int32(0),
				},
				{
					Name:        "Price",
					Type:        "string",
					Format:      "",
					Description: "",
					Priority:    int32(0),
				},
				{
					Name:        "Age",
					Type:        "date",
					Format:      "",
					Description: "",
					Priority:    int32(0),
				},
			},
			Categories:  []string{}, // Categories can be added later if needed
			Description: "Item resource",
		},
	},
}

// GetGroupVersionResource returns the GVR for a given kind
func GetGroupVersionResource(kind string) (*schema.GroupVersionResource, bool) {
	meta, ok := GetResourceMetadata(kind)
	if !ok {
		return nil, false
	}

	gvr := &schema.GroupVersionResource{
		Group:    meta.Group,
		Version:  meta.Version,
		Resource: meta.Config.Plural,
	}
	return gvr, true
}

// GetGroupVersionKind returns the GVK for a given kind
func GetGroupVersionKind(kind string) (*schema.GroupVersionKind, bool) {
	meta, ok := GetResourceMetadata(kind)
	if !ok {
		return nil, false
	}

	gvk := &schema.GroupVersionKind{
		Group:   meta.Group,
		Version: meta.Version,
		Kind:    meta.Config.Kind,
	}
	return gvk, true
}

// RegisterAllResources registers all generated resources with the provided registry
func RegisterAllResources(reg registry.Registry) error {
	// Register Category
	{
		meta := resourceMetadataMap["Category"]
		gvr := schema.GroupVersionResource{
			Group:    meta.Group,
			Version:  meta.Version,
			Resource: meta.Config.Plural,
		}

		if err := reg.RegisterResource(gvr, meta.Config); err != nil {
			return err
		}
	}
	// Register Item
	{
		meta := resourceMetadataMap["Item"]
		gvr := schema.GroupVersionResource{
			Group:    meta.Group,
			Version:  meta.Version,
			Resource: meta.Config.Plural,
		}

		if err := reg.RegisterResource(gvr, meta.Config); err != nil {
			return err
		}
	}
	return nil
}
