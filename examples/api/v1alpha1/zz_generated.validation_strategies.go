//go:build !ignore_autogenerated

// Code generated by cli-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"reflect"

	"k8s.io/apimachinery/pkg/runtime"

	"github.com/dtomasi/k1s/core/validation"
)

// GetValidationStrategy returns the validation strategy for a given kind
func GetValidationStrategy(kind string) validation.ValidationStrategy {
	strategy, ok := validationStrategies[kind]
	if !ok {
		return &NoOpValidationStrategy{}
	}
	return strategy
}

// NoOpValidationStrategy is a no-op validation strategy
type NoOpValidationStrategy struct{}

func (s *NoOpValidationStrategy) Execute(ctx context.Context, obj runtime.Object) []validation.ValidationError {
	return nil
}

func (s *NoOpValidationStrategy) SupportsType(obj runtime.Object) bool {
	return true
}

var validationStrategies = map[string]validation.ValidationStrategy{
	"Category": &CategoryValidationStrategy{},
	"Item":     &ItemValidationStrategy{},
}

// Compile-time interface assertions
var _ validation.ValidationStrategy = (*CategoryValidationStrategy)(nil)
var _ validation.ValidationStrategy = (*ItemValidationStrategy)(nil)

// CategoryValidationStrategy validates Category objects
type CategoryValidationStrategy struct{}

func (s *CategoryValidationStrategy) Execute(ctx context.Context, obj runtime.Object) []validation.ValidationError {
	// Simple validation - for now just return nil
	// In a real implementation, this would validate Category-specific rules
	return nil
}

func (s *CategoryValidationStrategy) SupportsType(obj runtime.Object) bool {
	// Check if object is of the correct type by examining its ObjectKind
	if objectKind := obj.GetObjectKind(); objectKind != nil {
		gvk := objectKind.GroupVersionKind()
		if gvk.Kind == "Category" {
			return true
		}
	}
	// Fallback: check by type reflection
	return reflect.TypeOf(obj).String() == "*v1alpha1.Category"
}

// ItemValidationStrategy validates Item objects
type ItemValidationStrategy struct{}

func (s *ItemValidationStrategy) Execute(ctx context.Context, obj runtime.Object) []validation.ValidationError {
	// Simple validation - for now just return nil
	// In a real implementation, this would validate Item-specific rules
	return nil
}

func (s *ItemValidationStrategy) SupportsType(obj runtime.Object) bool {
	// Check if object is of the correct type by examining its ObjectKind
	if objectKind := obj.GetObjectKind(); objectKind != nil {
		gvk := objectKind.GroupVersionKind()
		if gvk.Kind == "Item" {
			return true
		}
	}
	// Fallback: check by type reflection
	return reflect.TypeOf(obj).String() == "*v1alpha1.Item"
}
